
Î”68(t,(slope,r75,r68)) = slope * (exp(Î»235U.val*t) - 1 - r75) + r68 - exp(Î»238U.val*t) + 1
dÎ”68(t,(slope,r75,r68)) = slope * Î»235U.val*exp(Î»235U.val*t) - Î»238U.val*exp(Î»238U.val*t)

function newton_zero(f, df, x0, args::Tuple, iterations=10)
    for i in 1:iterations
        Î´x = f(x0, args)/df(x0, args)
        x0 -= Î´x
    end
    return x0
end

function upperintercept(tâ‚—â‚—::Number, s::Ellipse{T}, sigmalevel::T=2.447746830680816) where {T<:AbstractFloat}
    # bivariate p=0.05 level: sqrt(invlogccdf(Chisq(2), log(0.05)))

    # Get ratios from our ellipse
    r75, r68 = s.x, s.y
    r75â‚€, r68â‚€ = s.xâ‚€, s.yâ‚€
    Ïƒ75â‚€, Ïƒ68â‚€ = s.Ïƒxâ‚€, s.Ïƒyâ‚€
    # Return early if our lead loss time is too old or anything is NaN'd
    tâ‚—â‚— < age(r68â‚€,Î»238U.val) || return T(NaN) Â± T(NaN)
    tâ‚—â‚— < age(r75â‚€,Î»235U.val) || return T(NaN) Â± T(NaN)

    # If reversely discordant, move to the closest point on Concordia rather
    # than projecting down a fictive "lead gain" array, increasing uncertainty
    # by sqrt(MSWD) if discordance is large
    age68 = age(r68â‚€ Â± Ïƒ68â‚€, Î»238U.val)
    age75 = age(r75â‚€ Â± Ïƒ75â‚€, Î»235U.val)
    age75.val > age68.val || return first(wmean((age68, age75), corrected=true))

    # Calculate isotopic ratios of our time of Pb-loss
    r75â‚—â‚— = ratio(tâ‚—â‚—, Î»235U.val)
    r68â‚—â‚— = ratio(tâ‚—â‚—, Î»238U.val)
    slopeâ‚€ = (r68â‚€-r68â‚—â‚—)/(r75â‚€-r75â‚—â‚—)

    # Find the values on the margin of the ellipse with the
    # largest and smallest angular difference from the center
    r75â‚‹, r68â‚‹ = argmax(x->atan((x[2]-r68â‚—â‚—)/(x[1]-r75â‚—â‚—)), zip(r75, r68))
    slopeâ‚‹ = (r68â‚‹-r68â‚—â‚—)/(r75â‚‹-r75â‚—â‚—)
    0 < slopeâ‚‹ < Inf || return T(NaN) Â± T(NaN)
    r75â‚Š, r68â‚Š = argmin(x->atan((x[2]-r68â‚—â‚—)/(x[1]-r75â‚—â‚—)), zip(r75, r68))
    slopeâ‚Š = (r68â‚Š-r68â‚—â‚—)/(r75â‚Š-r75â‚—â‚—)
    0 < slopeâ‚Š < Inf || return T(NaN) Â± T(NaN)

    # Find the upper intercept of our Pb-loss arrays with Concordia
    uiâ‚€ = newton_zero(Î”68, dÎ”68, tðŸœ¨, (slopeâ‚€,r75â‚€,r68â‚€))
    0 < uiâ‚€ < tðŸœ¨ || return T(NaN) Â± T(NaN)
    uiâ‚‹ = newton_zero(Î”68, dÎ”68, tðŸœ¨, (slopeâ‚‹,r75â‚‹,r68â‚‹))
    uiâ‚Š = newton_zero(Î”68, dÎ”68, tðŸœ¨, (slopeâ‚Š,r75â‚Š,r68â‚Š))
    # Direct uncertainty, from spread in intercepts given size of ellipse
    Ïƒ = (val(uiâ‚Š) - val(uiâ‚‹))/2sigmalevel
    # Include also uncertainty, from lower intercept if tâ‚—â‚— (and ui) are `Measurement`s
    return val(uiâ‚€) Â± Ïƒcombined(uiâ‚€, Ïƒ)
end
Ïƒcombined(m::Measurement, Ïƒ) = sqrt(err(m)^2 + Ïƒ^2)
Ïƒcombined(m, Ïƒ) = Ïƒ # If m is not a Measurement

upperintercept(tâ‚—â‚—::Number, d::UPbAnalysis) = upperintercept(tâ‚—â‚—, ellipse(d; npoints=50))

function upperintercept(tâ‚—â‚—::Number, d::UPbAnalysis{T}, nresamplings::Integer) where T
    # Get ratios
    r75â‚€, r68â‚€ = d.Î¼
    # Return early if our lead loss time is too old or anything is NaN'd
    tâ‚—â‚— < log(r68â‚€+1)/Î»238U.val || return fill!(uis, T(NaN))
    tâ‚—â‚— < log(r75â‚€+1)/Î»235U.val || return fill!(uis, T(NaN))

    # Calculate isotopic ratios of our time of Pb-loss
    r75â‚—â‚— = exp(Î»235U.val*tâ‚—â‚—) - 1
    r68â‚—â‚— = exp(Î»238U.val*tâ‚—â‚—) - 1
    slopeâ‚€ = (r68â‚€-r68â‚—â‚—)/(r75â‚€-r75â‚—â‚—)

    ui = zeros(T, nresamplings)
    samples = rand(d, nresamplings)
    @assert axes(samples,2) == eachindex(ui)
    @inbounds for i in axes(samples,2)
        r75, r68 = view(samples, :, i)
        slope = (r68-r68â‚—â‚—)/(r75-r75â‚—â‚—)
        ui[i] = newton_zero(Î”68, dÎ”68, tðŸœ¨, (slope,r75,r68))
    end
    return ui
end

function upperintercept(d::Collection{UPbAnalysis{T}}, nresamplings::Integer) where {T}
    ui = zeros(T, nresamplings)
    slopes, intercepts = fit_lines(d, nresamplings)
    @inbounds for i in eachindex(ui, slopes, intercepts)
        ui[i] = newton_zero(Î”68, dÎ”68, tðŸœ¨, (slopes[i],zero(T),intercepts[i]))
    end
    return ui
end
function upperintercept(d::Collection{UPbAnalysis{T}}) where {T}
    yf = yorkfit(d)
    return newton_zero(Î”68, dÎ”68, tðŸœ¨, (yf.slope, yf.xm, yf.ym))
end

function lowerintercept(d::Collection{UPbAnalysis{T}}, nresamplings::Integer) where {T}
    li = zeros(T, nresamplings)
    slopes, intercepts = fit_lines(d, nresamplings)
    @inbounds for i in eachindex(li, slopes, intercepts)
        li[i] = newton_zero(Î”68, dÎ”68, zero(T), (slopes[i],zero(T),intercepts[i]))
    end
    return li
end
function lowerintercept(d::Collection{UPbAnalysis{T}}) where {T}
    yf = yorkfit(d)
    return newton_zero(Î”68, dÎ”68, zero(T), (yf.slope, yf.xm, yf.ym))
end

function intercepts(d::Collection{UPbAnalysis{T}}, nresamplings::Integer) where {T}
    ui, li = zeros(T, nresamplings), zeros(T, nresamplings)
    slopes, intercepts = fit_lines(d, nresamplings)
    @inbounds for i in eachindex(ui, li, slopes, intercepts)
        ui[i] = newton_zero(Î”68, dÎ”68, tðŸœ¨, (slopes[i],zero(T),intercepts[i]))
        li[i] = newton_zero(Î”68, dÎ”68, zero(T), (slopes[i],zero(T),intercepts[i]))
    end
    return ui, li
end
function intercepts(d::Collection{UPbAnalysis{T}}) where {T}
    yf = yorkfit(d)
    ui = newton_zero(Î”68, dÎ”68, tðŸœ¨, (yf.slope, yf.xm, yf.ym))
    li = newton_zero(Î”68, dÎ”68, zero(T), (yf.slope, yf.xm, yf.ym))
    return ui, li
end

function fit_lines(d::Collection{UPbAnalysis{T}}, nresamplings::Integer) where {T}
    nanalyses = length(d)
    # Vector of ratios
    r68 = zeros(T, nanalyses)
    # Draw random ratios from each analysis
    randratios = rand.(d, nresamplings)
    # Allocate temporary arrays for regression
    A = ones(T, nanalyses, 2)
    # Allocate output slopes and intercepts
    slopes, intercepts = zeros(T, nresamplings), zeros(T, nresamplings)
    @inbounds for n in eachindex(slopes, intercepts)
        for i in eachindex(d, randratios)
            A[i,2] = randratios[i][1,n]
            r68[i] = randratios[i][2,n]
        end
        # Linear regression
        Ï• = A\r68 # or perhgaps alternatively in some cases Ï• = ldiv!(lu!(A), r68)?
        slopes[n], intercepts[n] = Ï•[2], Ï•[1]
    end
    return slopes, intercepts
end
